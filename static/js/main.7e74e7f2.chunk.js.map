{"version":3,"sources":["constants.js","utils.js","Board.js","minmax.js","TicTacToe.js","App.js","index.js"],"names":["GAME_STATES","GAME_MODES","easy","medium","difficult","SCORES","1","0","2","getRandomInt","min","max","Math","ceil","floor","random","switchPlayer","player","Board","grid","getEmptySquares","squares","forEach","square","i","push","makeMove","isEmpty","length","getWinner","winningCombos","res","el","clone","concat","this","Array","fill","minmax","board","thisScore","mult","maxScore","bestMove","empty","copy","arr","Container","style","width","DIMS","useState","setGrid","human","computer","players","setPlayers","gameState","setGameState","mode","setMode","nextMove","setNextMove","winner","setWinner","useEffect","winnerStr","declareWinner","move","useCallback","index","gridCopy","computerMove","emptyIndices","includes","timeout","setTimeout","clearTimeout","humanMove","changeMode","e","target","value","choosePlayer","option","className","map","isActive","onClick","StartScreen","onChange","Object","keys","key","gameMode","Square","Marker","TicTacToe","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7e74e7f2.chunk.js","sourcesContent":["export const DIMS = 3;\nexport const DRAW = 0;\nexport const PLAYER_X = 1;\nexport const PLAYER_O = 2;\nexport const SQUARE_DIMS = 100;\nexport const GAME_STATES = {\n  notStarted: \"not_started\",\n  inProgress: \"in_progress\",\n  over: \"over\",\n};\nexport const GAME_MODES = {\n  easy: \"easy\",\n  medium: \"medium\",\n  difficult: \"difficult\",\n};\nexport const SCORES = {\n  1: 1,\n  0: 0,\n  2: -1,\n};\n","import { PLAYER_X, PLAYER_O } from \"./constants\";\n\nexport const getRandomInt = (min, max) => {\n  min = Math.ceil(min);\n  max = Math.floor(max);\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n};\n\nexport const switchPlayer = (player) => {\n  return player === PLAYER_X ? PLAYER_O : PLAYER_X;\n};\n","import { DIMS, DRAW } from \"./constants\";\n\nexport default class Board {\n  constructor(grid) {\n    this.grid = grid || new Array(DIMS ** 2).fill(null);\n  }\n\n  getEmptySquares = (grid = this.grid) => {\n    let squares = [];\n    grid.forEach((square, i) => {\n      if (square === null) squares.push(i);\n    });\n    return squares;\n  };\n\n  makeMove = (square, player) => {\n    if (this.grid[square] === null) {\n      this.grid[square] = player;\n    }\n  };\n\n  isEmpty = (grid = this.grid) => {\n    return this.getEmptySquares(grid).length === DIMS ** 2;\n  };\n\n  getWinner = (grid = this.grid) => {\n    const winningCombos = [\n      [0, 1, 2],\n      [3, 4, 5],\n      [6, 7, 8],\n      [0, 3, 6],\n      [1, 4, 7],\n      [2, 5, 8],\n      [0, 4, 8],\n      [2, 4, 6],\n    ];\n\n    let res = null;\n\n    winningCombos.forEach((el, i) => {\n      if (\n        grid[el[0]] !== null &&\n        grid[el[0]] === grid[el[1]] &&\n        grid[el[0]] === grid[el[2]]\n      ) {\n        res = grid[el[0]];\n      } else if (res === null && this.getEmptySquares(grid).length === 0) {\n        res = DRAW;\n      }\n    });\n    return res;\n  };\n  clone = () => {\n    return new Board(this.grid.concat());\n  };\n}\n","import { SCORES } from \"./constants\";\nimport { switchPlayer } from \"./utils\";\n\nexport const minmax = (board, player) => {\n  const mult = SCORES[player];\n  let thisScore;\n  let maxScore = -1;\n  let bestMove = null;\n\n  if (board.getWinner() !== null) {\n    return [SCORES[board.getWinner()], 0];\n  } else {\n    for (let empty of board.getEmptySquares()) {\n      let copy = board.clone();\n      copy.makeMove(empty, player);\n\n      thisScore = mult * minmax(copy, switchPlayer(player))[0];\n\n      if (thisScore >= maxScore) {\n        maxScore = thisScore;\n        bestMove = empty;\n      }\n    }\n\n    return [mult * maxScore, bestMove];\n  }\n};\n","import React, { useState, useEffect, useCallback } from \"react\";\nimport {\n  DIMS,\n  PLAYER_X,\n  PLAYER_O,\n  SQUARE_DIMS,\n  GAME_STATES,\n  DRAW,\n  GAME_MODES,\n} from \"./constants\";\nimport { getRandomInt, switchPlayer } from \"./utils.js\";\nimport Board from \"./Board\";\nimport { minmax } from \"./minmax\";\nimport \"./TicTacToe.scss\";\n\nconst arr = new Array(DIMS ** 2).fill(null);\n\nconst board = new Board();\n\nconst TicTacToe = () => {\n  return <Container></Container>;\n};\n\nconst Container = () => {\n  const style = {\n    width: `${DIMS * (SQUARE_DIMS + 5)}px`,\n  };\n\n  const [grid, setGrid] = useState(arr);\n\n  const [players, setPlayers] = useState({\n    human: null,\n    computer: null,\n  });\n\n  const [gameState, setGameState] = useState(GAME_STATES.notStarted);\n\n  const [mode, setMode] = useState(GAME_MODES.medium);\n\n  const [nextMove, setNextMove] = useState(null);\n\n  const [winner, setWinner] = useState(null);\n\n  useEffect(() => {\n    const winner = board.getWinner(grid);\n    const declareWinner = (winner) => {\n      let winnerStr;\n      switch (winner) {\n        case PLAYER_X:\n          winnerStr = \"Player X wins\";\n          break;\n        case PLAYER_O:\n          winnerStr = \"Player O wins\";\n          break;\n        case DRAW:\n        default:\n          winnerStr = \"It's a Draw!\";\n      }\n      setGameState(GAME_STATES.over);\n      setWinner(winnerStr);\n    };\n    if (winner !== null && gameState !== GAME_STATES.over) {\n      declareWinner(winner);\n    }\n  }, [gameState, grid, nextMove]);\n\n  const choosePlayer = (option) => {\n    setPlayers({ human: option, computer: switchPlayer(option) });\n    setGameState(GAME_STATES.inProgress);\n    setNextMove(PLAYER_X);\n  };\n\n  const startNewGame = () => {\n    setGameState(GAME_STATES.notStarted);\n    setGrid(arr);\n  };\n\n  const move = useCallback(\n    (index, player) => {\n      if (player && gameState === GAME_STATES.inProgress) {\n        setGrid((grid) => {\n          const gridCopy = grid.concat();\n          gridCopy[index] = player;\n          return gridCopy;\n        });\n      }\n    },\n    [gameState]\n  );\n\n  //Computer Move's\n  const computerMove = useCallback(() => {\n    const board = new Board(grid.concat());\n    const emptyIndices = board.getEmptySquares(grid);\n    let index;\n\n    switch (mode) {\n      case GAME_MODES.easy:\n        index = getRandomInt(0, 8);\n        while (!emptyIndices.includes(index)) {\n          index = getRandomInt(0, 8);\n        }\n        break;\n      case GAME_MODES.medium:\n        const smartMove = !board.isEmpty(grid) && Math.random() < 0.5;\n        if (smartMove) {\n          index = minmax(board, players.computer)[1];\n        } else {\n          index = getRandomInt(0, 8);\n          while (!emptyIndices.includes(index)) {\n            index = getRandomInt(0, 8);\n          }\n        }\n        break;\n      case GAME_MODES.difficult:\n      default:\n        index = board.isEmpty(grid)\n          ? getRandomInt(0, 8)\n          : minmax(board, players.computer)[1];\n    }\n\n    if (!grid[index]) {\n      move(index, players.computer);\n      setNextMove(players.human);\n    }\n  }, [move, players, grid, mode]);\n\n  useEffect(() => {\n    let timeout;\n    if (\n      nextMove !== null &&\n      nextMove === players.computer &&\n      gameState !== GAME_STATES.over\n    ) {\n      timeout = setTimeout(() => {\n        computerMove();\n      }, 500);\n    }\n    return () => timeout && clearTimeout(timeout);\n  }, [nextMove, computerMove, players.computer, gameState]);\n\n  const humanMove = (index) => {\n    if (!grid[index] && nextMove === players.human) {\n      move(index, players.human);\n      setNextMove(players.computer);\n    }\n  };\n\n  const changeMode = (e) => {\n    setMode(e.target.value);\n  };\n\n  switch (gameState) {\n    case GAME_STATES.notStarted:\n    default:\n      return (\n        <StartScreen\n          changeMode={changeMode}\n          mode={mode}\n          choosePlayer={choosePlayer}\n        />\n      );\n    case GAME_STATES.inProgress:\n      return (\n        <div className=\"container\" style={style}>\n          {grid.map((value, index) => {\n            const isActive = value !== null;\n            return (\n              <Square\n                key={index}\n                isActive={isActive}\n                value={value}\n                index={index}\n                humanMove={humanMove}\n              ></Square>\n            );\n          })}\n        </div>\n      );\n    case GAME_STATES.over:\n      return (\n        <div>\n          <p>{winner}</p>\n          <button onClick={startNewGame}>Start Over</button>\n        </div>\n      );\n  }\n};\n\nconst StartScreen = ({ choosePlayer, changeMode, mode }) => {\n  return (\n    <div className=\"screen\">\n      <div className=\"inner\">\n        <p>Select Difficulty !!</p>\n        <select onChange={changeMode} value={mode}>\n          {Object.keys(GAME_MODES).map((key) => {\n            const gameMode = GAME_MODES[key];\n            return (\n              <option key={gameMode} value={gameMode}>\n                {key}\n              </option>\n            );\n          })}\n        </select>\n      </div>\n      <div className=\"inner\">\n        <p>Choose your Player</p>\n        <div className=\"button-row\">\n          <button onClick={() => choosePlayer(PLAYER_X)}>X</button>\n          <p>or</p>\n          <button onClick={() => choosePlayer(PLAYER_O)}>O</button>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nconst Square = ({ isActive, value, index, humanMove }) => {\n  return (\n    <div className=\"square\" onClick={() => humanMove(index)}>\n      {isActive && <Marker value={value} />}\n    </div>\n  );\n};\n\nconst Marker = ({ value }) => {\n  return <div className=\"marker\">{value === PLAYER_X ? \"X\" : \"O\"}</div>;\n};\n\nexport default TicTacToe;\n","import React from \"react\";\nimport TicTacToe from \"./TicTacToe\";\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <div className=\"app\">\n      <TicTacToe />\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}